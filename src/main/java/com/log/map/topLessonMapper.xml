<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.log.dao.topLessonMapper" >
  <resultMap id="BaseResultMap" type="com.log.model.topLesson" >
    <id column="book_id" property="book_id" jdbcType="VARCHAR" />
    <id column="year" property="year" jdbcType="VARCHAR" />
    <id column="month" property="month" jdbcType="VARCHAR" />
    <result column="rate" property="rate" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="topLessonResults" type="com.log.pojo.topLessonPojo">
  <id column="book_name" property="book_name" />
  <result column="num" property="num"  />
  <result column="rank" property="rank"/>
  </resultMap>
  
  <sql id="Base_Column_List" >
    book_id, year, month, rate
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.log.model.topLessonKey" >
    select 
    <include refid="Base_Column_List" />
    from topLesson
    where book_id = #{book_id,jdbcType=VARCHAR}
      and year = #{year,jdbcType=VARCHAR}
      and month = #{month,jdbcType=VARCHAR}
  </select>
  
  <select id="topLesson"  resultType="java.util.LinkedHashMap">
    select 
    book_id,sum(rate) as num
    from topLesson
    group by book_id
   order by num desc
  </select>
  <select id="randomTopLesson"  parameterType="string" resultMap="topLessonResults">
  select bookInformation.book_name,c.num,c.rank from(select book_id,num,
CASE
when @rowtotal = num THEN
 @rownum
WHEN @rowtotal := num THEN
    @rownum :=@rownum + 1
WHEN @rowtotal = 0 THEN
    @rownum :=@rownum + 1
END AS rank
FROM
(
select book_id,sum(rate) as num FROM(
select book_id ,rate,CONCAT(year,"-",month) as time from topLesson)b 
where time BETWEEN #{startTime} and #{endTime} GROUP BY (book_id) ORDER BY(num) desc
)a,(SELECT @rownum := 0 ,@rowtotal := NULL) r)c,bookInformation where c.book_id=bookInformation.book_id
order by(c.num) desc;
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="com.log.model.topLessonKey" >
    delete from topLesson
    where book_id = #{book_id,jdbcType=VARCHAR}
      and year = #{year,jdbcType=VARCHAR}
      and month = #{month,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.log.model.topLesson" >
    insert into topLesson (book_id, year, month, 
      rate)
    values (#{book_id,jdbcType=VARCHAR}, #{year,jdbcType=VARCHAR}, #{month,jdbcType=VARCHAR}, 
      #{rate,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.log.model.topLesson" >
    insert into topLesson
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="book_id != null" >
        book_id,
      </if>
      <if test="year != null" >
        year,
      </if>
      <if test="month != null" >
        month,
      </if>
      <if test="rate != null" >
        rate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="book_id != null" >
        #{book_id,jdbcType=VARCHAR},
      </if>
      <if test="year != null" >
        #{year,jdbcType=VARCHAR},
      </if>
      <if test="month != null" >
        #{month,jdbcType=VARCHAR},
      </if>
      <if test="rate != null" >
        #{rate,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.log.model.topLesson" >
    update topLesson
    <set >
      <if test="rate != null" >
        rate = #{rate,jdbcType=INTEGER},
      </if>
    </set>
    where book_id = #{book_id,jdbcType=VARCHAR}
      and year = #{year,jdbcType=VARCHAR}
      and month = #{month,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.log.model.topLesson" >
    update topLesson
    set rate = #{rate,jdbcType=INTEGER}
    where book_id = #{book_id,jdbcType=VARCHAR}
      and year = #{year,jdbcType=VARCHAR}
      and month = #{month,jdbcType=VARCHAR}
  </update>
</mapper>